var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = CBFV","category":"page"},{"location":"api/#CBFV","page":"API","title":"CBFV","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [CBFV]\nPrivate = false\nOrder = [:function,:type]","category":"page"},{"location":"api/#CBFV.generatefeatures-Tuple{DataFrames.DataFrame}","page":"API","title":"CBFV.generatefeatures","text":"generatefeatures(data; elementdata,dropduplicate,combine,sumfeatures,returndataframe)\ngeneratefeatures(data, elementdata; kwargs...)\ngeneratefeatures(dataname; kwargs...)\n\nThis is the primary function for generating the CBFV features for a dataset of formulas with or without existing features. This function will process the input data and grab the provided element database. The assigning of features is then executed based on the CBFV approach. If the returndataframe=true then a DataFrame data type is returned by this function with the added columns :target and :formula. \n\nnote: Note\nI am not using OrderedDict so the column names will be arranged based on the native Dict  ordering. \n\nArguments\n\ndata::DataFrame: This is the data set that you want to be featurized for example.\nelementdata::Union{String,FileName}: The name of the internal database or the file path and\n\nname to an external database.\n\ndropduplicate::Bool=true: Option to drop duplicate entries.\ncombine::Bool=false: Option to combine existing features in data with the generated feature set.\nsumfeatures::Bool=false: Option to include the sum_ feature columns.\nreturndataframe::Bool=true: Option to return a DataFrame. Will include :target and :formula columns.\n\nReturns\n\ngeneratedataframe::DataFrame\nformulae::Vector{String}, features::Array{Number,2}, targets::Vector{Number}\n\nThe following featurization schemes are included within CBFV.jl:\n\noliynyk (default)\nmagpie\nmat2vec\njarvis\nonehot\nrandom_200\n\nusing DataFrames\nusing CBFV\nd = DataFrame(:formula=>[\"Tc1V1\",\"Cu1Dy1\",\"Cd3N2\"],:target=>[248.539,66.8444,91.5034])\ngeneratefeatures(d)\n\n\n\n\n\n","category":"method"},{"location":"api/#CBFV.processelementdatabase-Tuple{DataFrames.DataFrame}","page":"API","title":"CBFV.processelementdatabase","text":"processelementdatabase(data)\n\nTakes the element feature dataframe and process it to return a dictionary with values of type Array{String,N}` and a Array representation of the entire database.\n\nArguments\n\ndata::DataFrame: element feature dataframe from database file\n\nReturns\n\nelementproperties::Dict{Symbol,Array{String,N}} : dictionary with keys :symbols,:index, and :missing which return Array{String,N} values for the dataframe\narrayrepresentation::Array{Any,2}: representation of the dataframe\n\n\n\n\n\n","category":"method"},{"location":"api/#CBFV.processinputdata-Tuple{DataFrames.DataFrame, DataFrames.DataFrame}","page":"API","title":"CBFV.processinputdata","text":"processinputdata(datainput,elementdatabase)\n\nTake the data set that contains the formula's, target values, and additional features and then extract the elemental properties from the element database provided. Also  get the column/feature used in the element properties.\n\nArguments\n\ndatainput::DataFrame: data containing columns :formula and :target.\nelementfeatures::Array{Number,2}: element feature set based on database \n\nReturns\n\nelpropnames::Array{String,1}: The names of the properties in elemental database\nprocesseddata::Vector{Dict{Symbol,Any}}: The processed input data based on elemental database.\n\n\n\n\n\n","category":"method"},{"location":"api/#CBFV.FileName","page":"API","title":"CBFV.FileName","text":"generatefeatures Datatype for multiple dispatch\n\n\n\n\n\n","category":"type"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The example below uses the default oliynyk feature element database:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataFrames\nusing CBFV\nd = DataFrame(:formula=>[\"Tc1V1\",\"Cu1Dy1\",\"Cd3N2\"],:target=>[248.539,66.8444,91.5034])\ngeneratefeatures(d)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"now trying with the jarvis database:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataFrames #hide\nusing CBFV #hide\nd = DataFrame(:formula=>[\"Tc1V1\",\"Cu1Dy1\",\"Cd3N2\"],:target=>[248.539,66.8444,91.5034]) #hide\ngeneratefeatures(d,elementdata=\"jarvis\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Another example:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataFrames\nusing CBFV\ndata = DataFrame(\"name\"=>[\"Rb2Te\",\"CdCl2\",\"LaN\"],\"bandgap_eV\"=>[1.88,3.51,1.12])\nrename!(data,Dict(\"name\"=>\"formula\",\"bandgap_eV\"=>\"target\"))\nfeatures = generatefeatures(data)","category":"page"},{"location":"#CBFV.jl-:-A-simple-composition-based-feature-vectorization-utility-in-Julia","page":"Intro","title":"CBFV.jl : A simple composition-based feature vectorization utility in Julia","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"This is a Julia rewrite of the python tool to create a composition-based feature vector representation for machine learning with materials science data. The ideas and methodology are discussed in the recent article:","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"Wang, Anthony Yu-Tung; Murdock, Ryan J.; Kauwe, Steven K.; Oliynyk, Anton O.; Gurlo, Aleksander; Brgoch, Jakoah; Persson, Kristin A.; Sparks, Taylor D., Machine Learning for Materials Scientists: An Introductory Guide toward Best Practices, Chemistry of Materials 2020, 32 (12): 4954â€“4965. DOI: 10.1021/acs.chemmater.0c01907.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"and the original python source code(s) can be found here:","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"https://github.com/anthony-wang/BestPractices/tree/master/notebooks/CBFV\nhttps://github.com/kaaiian/CBFV","category":"page"},{"location":"#Example-Use","page":"Intro","title":"Example Use","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"The input data set should have a least two columns with the header/names formula and target.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"using DataFrames\nusing CBFV\ndata = DataFrame(\"name\"=>[\"Rb2Te\",\"CdCl2\",\"LaN\"],\"bandgap_eV\"=>[1.88,3.51,1.12])\nrename!(data,Dict(\"name\"=>\"formula\",\"bandgap_eV\"=>\"target\"))\nfeatures = generatefeatures(data)","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"The thing to note is you most likely will still want to post-process the generated feature data using some transformation to scale the data. The StatsBase.jl package provides some basic fetures for this, although the input needs to be AbstractMatrix{<:Real} rather than a DataFrame. This can be achieved using generatefeatures(data,returndataframe=false)","category":"page"},{"location":"#Supported-Featurization-Schemes","page":"Intro","title":"Supported Featurization Schemes","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"As with the orignal CBFV python package the following element databases are available:","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"oliynyk (default): Database from A. Oliynyk.\nmagpie: Materials Agnostic Platform for Informatics and Exploration\nmat2vec:  Word embeddings capture latent knowledge from materials science\njarvis: Joint Automated Repository for Various Integrated Simulations provided by U.S. National Institutes of Standards and Technologies.\nonehot: Simple one hot encoding scheme, i.e., diagonal elemental matrix.\nrandom_200: 200 random elemental properties (I'm assuming).","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"However, CBFV.jl will allow you to provide your own element database to featurize with. Also, the current implementation reads the saved .csv file in databases, however, this is prone to potential issues (ex. out of date files). To alleviate this I will change the implementation to utilize Pkg.Artificats with a Artificats.toml file that enables grabbing the datafiles needed from a server if they don't exist locally already.","category":"page"},{"location":"#Julia-Dependencies","page":"Intro","title":"Julia Dependencies","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"This is a relatively small package so there aren't a lot of dependencies. The required packages are:","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"CSV\nDataFrames\nProgressBars","category":"page"},{"location":"#Citations","page":"Intro","title":"Citations","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"Pleae cite the following when and if you use this package in your work:","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"@misc{CBFV.jl,\n    author = {Bringuier, Stefan},\n    year = {2021},\n    title = {CBFV.jl - A simple composition based feature vectorization Julia utility},\n    url = {https://github.com/JuliaMatSci/CBFV.jl},\n}","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"In addition, please also consider citing the original python implementation and tutorial paper.","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"@misc{CBFV,\n    author = {Kauwe, Steven and Wang, Anthony Yu-Tung and Falkowski, Andrew},\n    title = {CBFV: Composition-based feature vectors},\n    url = {https://github.com/kaaiian/CBFV}\n}","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"@article{Wang2020bestpractices,\n    author = {Wang, Anthony Yu-Tung and Murdock, Ryan J. and Kauwe, Steven K. and Oliynyk, Anton O. and Gurlo, Aleksander and Brgoch, Jakoah and Persson, Kristin A. and Sparks, Taylor D.},\n    year = {2020},\n    title = {Machine Learning for Materials Scientists: An Introductory Guide toward Best Practices},\n    url = {https://doi.org/10.1021/acs.chemmater.0c01907},\n    pages = {4954--4965},\n    volume = {32},\n    number = {12},\n    issn = {0897-4756},\n    journal = {Chemistry of Materials},\n    doi = {10.1021/acs.chemmater.0c01907}\n}","category":"page"}]
}
